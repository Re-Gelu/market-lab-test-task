import { PrismaService } from 'nestjs-prisma';
import {
  Action,
  Context,
  Hears,
  Message,
  On,
  Start,
  Update,
} from 'nestjs-telegraf';
import { Markup } from 'telegraf';

import { ConfigService } from '@nestjs/config';

import { TelegramBotService } from './telegram-bot.service';
import { TelegramBotWizard } from './telegram-bot.wizard';
import { TelegramContext } from './telegram-context.type';

@Update()
export class TelegramBotUpdate {
  constructor(
    private readonly database: PrismaService,
    private readonly telegramBotService: TelegramBotService,
    private readonly configService: ConfigService,
  ) {}

  private readonly pageSize = this.configService.get('PAGE_SIZE');

  @Start()
  async start(@Context() context: TelegramContext) {
    // –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await this.database.telegramBotUser.upsert({
      where: {
        id: context.from.id,
      },
      update: {},
      create: {
        id: context.from.id,
        username: context.from.username,
        language_code: context.from.language_code,
        first_name: context.from.first_name,
        last_name: context.from.last_name,
      },
    });

    await context.replyWithHTML(
      `<b>üëã –ü—Ä–∏–≤–µ—Ç, ${user.first_name}!</b> \n\n–Ø –±–æ—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–≤–æ–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏\n\n–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å—Å—ã–ª–∫–∏, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ, –∏ —è –ø–æ–∫–∞–∂—É, —á—Ç–æ –∑–∞ –Ω–µ–π —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è! \n\n<b>üí° –í–∑–≥–ª—è–Ω–∏ –Ω–∞ –º–µ–Ω—é –Ω–∏–∂–µ –∏ –≤—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å!</b>`,
      Markup.keyboard(['‚ûï –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É', '‚ÑπÔ∏è –ú–æ–∏ —Å—Å—ã–ª–∫–∏']).resize(),
    );
  }

  /** –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ (–¥–∞–ª–µ–µ —Å–º–æ—Ç—Ä–µ—Ç—å telegram-bot.wizard.ts) */
  @Hears('‚ûï –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É')
  async enterLinkCreationWizard(@Context() context: TelegramContext) {
    await context.scene.enter(TelegramBotWizard.name);
  }

  /** –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ */
  @Action('wizard_leave')
  async leaveLinkCreationWizard(@Context() context: TelegramContext) {
    await context.scene.leave();

    await this.telegramBotService.replyOrEditWithHTML(
      context,
      `‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω—ë–Ω!`,
    );
  }

  /** –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π */
  @Hears('‚ÑπÔ∏è –ú–æ–∏ —Å—Å—ã–ª–∫–∏')
  @Action(/links_page_(\d+)/)
  async getUserLinks(@Context() context: TelegramContext) {
    const queryPayload = context.match[1];
    const page = Number(queryPayload) || 1;

    const [links, totalLinks] = await Promise.all([
      this.database.link.findMany({
        where: { userId: context.from.id },
        orderBy: { createdAt: 'desc' },
        skip: (page - 1) * this.pageSize,
        take: this.pageSize,
      }),
      this.database.link.count({ where: { userId: context.from.id } }),
    ]);

    if (links.length === 0) {
      await context.replyWithHTML('üö´ –ü–æ–∫–∞ —Ç—É—Ç –ø—É—Å—Ç–æ :D');
      return;
    }

    const totalPages = Math.ceil(totalLinks / this.pageSize);

    const linkButtons = links.map((link) =>
      Markup.button.callback(link.name, `link_${link.id}`),
    );
    const paginationButtons = [];

    if (page > 1) {
      paginationButtons.push(
        Markup.button.callback('‚¨ÖÔ∏è', `links_page_${page - 1}`),
      );
    }

    if (page < totalPages) {
      paginationButtons.push(
        Markup.button.callback('‚û°Ô∏è', `links_page_${page + 1}`),
      );
    }

    await this.telegramBotService.replyOrEditWithHTML(
      context,
      `üìã –°—Ç—Ä–∞–Ω–∏—Ü–∞ <u><b>${page}</b></u>:`,
      Markup.inlineKeyboard([
        ...linkButtons.map((button) => [button]),
        paginationButtons,
      ]),
    );
  }

  /** –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ */
  @Action(/link_delete_confirmation_(.+)/)
  async deleteUserLinkConfirmation(@Context() context: TelegramContext) {
    const linkId = context.match[1];

    await context.replyWithHTML(
      '‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É?',
      Markup.inlineKeyboard([
        Markup.button.callback(`‚úÖ –î–∞`, `link_delete_${linkId}`),
        Markup.button.callback(`‚ùå –ù–µ—Ç`, `link_delete_refuse_${linkId}`),
      ]),
    );
  }

  /** –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ */
  @Action(/link_delete_refuse_(.+)/)
  async deleteUserLinkRefuse(@Context() context: TelegramContext) {
    await context.answerCbQuery('‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞');
    await context.deleteMessage();
  }

  /** –£–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ */
  @Action(/link_delete_(.+)/)
  async deleteUserLink(@Context() context: TelegramContext) {
    const linkId = context.match[1];

    const link = await this.database.link.delete({ where: { id: linkId } });

    await this.telegramBotService.replyOrEditWithHTML(
      context,
      `üóëÔ∏è <b>–°—Å—ã–ª–∫–∞ <u>${link.name}</u> –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!</b>`,
    );
  }

  /** –í—ã–≤–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Å—ã–ª–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ */
  @Action(/link_(.+)/)
  async getUserLink(@Context() context: TelegramContext) {
    const linkId = context.match[1];

    const link = await this.database.link.findUnique({ where: { id: linkId } });

    if (!link) {
      await context.replyWithHTML('üö´ –≠—Ç–∞ —Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞!');
      return;
    }

    await context.replyWithHTML(
      `üîë <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥: <code>${link.id}</code></b>\n\nüè∑Ô∏è –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: ${link.name}\nüîó URL: ${link.url}`,
      Markup.inlineKeyboard([
        Markup.button.callback(
          `üóëÔ∏è –£–¥–∞–ª–∏—Ç—å`,
          `link_delete_confirmation_${link.id}`,
        ),
      ]),
    );
  }

  /** –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É */
  @On('text')
  async getLink(
    @Context() context: TelegramContext,
    @Message('text') text: string,
  ) {
    const link = await this.database.link.findUnique({ where: { id: text } });

    if (!link) {
      await context.replyWithHTML(
        `‚ùå –û—à–∏–±–∫–∞! \n\n–°—Å—ã–ª–∫–∞ —Å –∫–æ–¥–æ–º üîë <code>${text}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`,
      );

      return;
    }

    await context.replyWithHTML(
      `üîë <b>–°—Å—ã–ª–∫–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É:</b>\n\nüè∑Ô∏è –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: ${link.name}\nüîó URL: ${link.url}`,
    );
  }
}
