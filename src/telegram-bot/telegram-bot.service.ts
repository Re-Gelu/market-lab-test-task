import { PrismaService } from 'nestjs-prisma';
import {
  Action,
  Context,
  Hears,
  Message,
  On,
  Start,
  Update,
} from 'nestjs-telegraf';
import { Markup } from 'telegraf';

import { Injectable } from '@nestjs/common';

import { TelegramBotWizard } from './telegram-bot.wizard';
import { TelegramContext } from './telegram-context.type';

@Update()
@Injectable()
export class TelegramBotService {
  constructor(private readonly database: PrismaService) {}

  private readonly pageSize = 5;

  @Start()
  async start(@Context() context: TelegramContext) {
    // Get or create user
    const user = await this.database.telegramBotUser.upsert({
      where: {
        id: context.from.id,
      },
      update: {},
      create: {
        id: context.from.id,
        username: context.from.username,
        language_code: context.from.language_code,
        first_name: context.from.first_name,
        last_name: context.from.last_name,
      },
    });

    await context.replyWithHTML(
      `
<b>–ü—Ä–∏–≤–µ—Ç, ${user.first_name}!</b>

–≠—Ç–æ –±–æ—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫. –ü–æ—Å–º–æ—Ç—Ä–∏, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –≤ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫ —Å–Ω–∏–∑—É!

–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —Å—Å—ã–ª–∫–∏ –∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –µ—ë –ø–æ–ª—É—á–∏—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!
`,
      Markup.keyboard(['‚ûï –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É', '‚ÑπÔ∏è –ú–æ–∏ —Å—Å—ã–ª–∫–∏']).resize(),
    );
  }

  @Hears('‚ûï –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É')
  async enterLinkCreationWizard(@Context() context: TelegramContext) {
    await context.scene.enter(TelegramBotWizard.name);
  }

  @Action('wizard_leave')
  async leaveLinkCreationWizard(@Context() context: TelegramContext) {
    await context.scene.leave();
    await context.replyWithHTML(`‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω—ë–Ω!`);
  }

  @Hears('‚ÑπÔ∏è –ú–æ–∏ —Å—Å—ã–ª–∫–∏')
  @Action(/links_page_(\d+)/)
  async getUserLinks(
    @Context()
    context: TelegramContext,
  ) {
    const queryPayload = context.match[1];
    const page = Number(queryPayload || 1);

    const [links, totalLinks] = await Promise.all([
      this.database.link.findMany({
        where: { userId: context.from.id },
        orderBy: { createdAt: 'desc' },
        skip: (page - 1) * this.pageSize,
        take: this.pageSize,
      }),
      this.database.link.count({ where: { userId: context.from.id } }),
    ]);

    if (links.length === 0) {
      await context.replyWithHTML('üö´ –ü–æ–∫–∞ —Ç—É—Ç –ø—É—Å—Ç–æ :D');
      return;
    }

    const totalPages = Math.ceil(totalLinks / this.pageSize);

    const linkButtons = links.map((link) =>
      Markup.button.callback(link.name, `link_${link.id}`),
    );
    const paginationButtons = [];

    if (page > 1) {
      paginationButtons.push(
        Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `links_page_${page - 1}`),
      );
    }

    if (page < totalPages) {
      paginationButtons.push(
        Markup.button.callback('–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', `links_page_${page + 1}`),
      );
    }

    await context.replyWithHTML(
      `üìã –°—Ç—Ä–∞–Ω–∏—Ü–∞ <u><b>${page}</b></u>:`,
      Markup.inlineKeyboard([
        ...linkButtons.map((button) => [button]),
        paginationButtons,
      ]),
    );

    if (queryPayload) {
      await context.deleteMessage();
    }
  }

  @Action(/link_delete_confirmation_(.+)/)
  async deleteUserLinkConfirmation(@Context() context: TelegramContext) {
    const linkId = context.match[1];

    await context.replyWithHTML(
      `‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Å—Å—ã–ª–∫—É?`,
      Markup.inlineKeyboard([
        Markup.button.callback(`‚úÖ –î–∞`, `link_delete_${linkId}`),
      ]),
    );
  }

  @Action(/link_delete_(.+)/)
  async deleteUserLink(@Context() context: TelegramContext) {
    const linkId = context.match[1];

    const link = await this.database.link.delete({ where: { id: linkId } });

    await context.replyWithHTML(
      `üóëÔ∏è <b>–°—Å—ã–ª–∫–∞ ${link.name} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!</b>`,
    );

    await context.deleteMessage();
  }

  @Action(/link_(.+)/)
  async getUserLink(@Context() context: TelegramContext) {
    const linkId = context.match[1];

    const link = await this.database.link.findUnique({ where: { id: linkId } });

    if (!link) {
      await context.replyWithHTML(`üö´ –≠—Ç–∞ —Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞!`);
      return;
    }

    await context.replyWithHTML(
      `
üîë <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥: <code>${link.id}</code></b>

üè∑Ô∏è –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: ${link.name}
üîó URL: ${link.url}
      `,
      Markup.inlineKeyboard([
        Markup.button.callback(
          `üóëÔ∏è –£–¥–∞–ª–∏—Ç—å`,
          `link_delete_confirmation_${link.id}`,
        ),
      ]),
    );
  }

  @On('message')
  async getLink(
    @Context() context: TelegramContext,
    @Message('text') text: string,
  ) {
    const link = await this.database.link.findUnique({ where: { id: text } });

    if (link) {
      await context.replyWithHTML(`
üîë <b>–°—Å—ã–ª–∫–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É:</b>
  
üè∑Ô∏è –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: ${link.name}
üîó URL: ${link.url}
`);
      return;
    }

    await context.replyWithHTML(
      `‚ùå –û—à–∏–±–∫–∞! \n\n–°—Å—ã–ª–∫–∞ —Å –∫–æ–¥–æ–º üîë <code>${text}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`,
    );
  }
}
