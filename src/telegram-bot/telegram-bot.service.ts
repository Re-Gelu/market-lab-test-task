import { isURL } from 'class-validator';
import { PrismaService } from 'nestjs-prisma';
import {
  Action,
  Context,
  Hears,
  Help,
  Message,
  On,
  Start,
  Update,
} from 'nestjs-telegraf';
import { Context as _TelegramContext, Markup } from 'telegraf';

import { Injectable } from '@nestjs/common';

type TelegramContext = _TelegramContext & {
  callbackQuery: { data: string };
  match: string[];
};

@Update()
@Injectable()
export class TelegramBotService {
  constructor(private readonly database: PrismaService) {}

  @Start()
  async start(@Context() context: TelegramContext) {
    // Get or create user
    const user = await this.database.telegramBotUser.upsert({
      where: {
        id: context.from.id,
      },
      update: {},
      create: {
        id: context.from.id,
        username: context.from.username,
        language_code: context.from.language_code,
        first_name: context.from.first_name,
        last_name: context.from.last_name,
      },
    });

    await context.reply(
      `–ü—Ä–∏–≤–µ—Ç ${user.first_name}!`,
      Markup.keyboard(['‚ûï –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É', '‚ÑπÔ∏è –ú–æ–∏ —Å—Å—ã–ª–∫–∏']).resize(),
    );
  }

  // ^\w+ ‚Äî –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏ —Å –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –±–æ–ª–µ–µ —Å–∏–º–≤–æ–ª–æ–≤ —Å–ª–æ–≤–∞ (–±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è).
  // \s+ ‚Äî –æ–¥–∏–Ω –∏–ª–∏ –±–æ–ª–µ–µ –ø—Ä–æ–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (—Ä–∞–∑–¥–µ–ª—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å—Å—ã–ª–∫—É).
  // \S+ ‚Äî –ª—é–±–∞—è –Ω–µ–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞.
  // $ ‚Äî –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏.
  @Hears(new RegExp(/^\w+\s+(\S+)$/))
  async createLink(
    @Context() context: TelegramContext,
    @Message('text') text: string,
  ) {
    const preparedText = text.trim().split(' ');
    const data = {
      name: preparedText[0],
      url: preparedText[1],
    };

    if (isURL(data.url)) {
      const link = await this.database.link.create({
        data: {
          ...data,
          userId: context.from.id,
        },
      });

      await context.replyWithHTML(`
‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!

üîë <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥: <code>${link.id}</code></b>

üè∑Ô∏è –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: ${link.name}
üîó URL: ${link.url}
`);
    }
  }

  @Hears('‚ÑπÔ∏è –ú–æ–∏ —Å—Å—ã–ª–∫–∏')
  @Action(/links_page_(\d+)/)
  async getLinks(
    @Context()
    context: TelegramContext & {
      callbackQuery: { data: string };
      match: string[];
    },
  ) {
    const queryPayload = context.match[1];
    const currentPage = Number(queryPayload || 1);
    const limit = 3;

    const links = await this.database.link.findMany({
      where: { userId: context.from.id },
      skip: (currentPage - 1) * limit,
      take: limit,
    });

    if (links.length === 0) {
      await context.replyWithHTML('üö´ –ü–æ–∫–∞ —Ç—É—Ç –ø—É—Å—Ç–æ :D');
      return;
    }

    const totalLinks = await this.database.link.count({
      where: { userId: context.from.id },
    });
    const totalPages = Math.ceil(totalLinks / limit);

    const linkButtons = links.map((link) =>
      Markup.button.callback(link.name, `link_${link.id}`),
    );
    const paginationButtons = [];

    if (currentPage > 1) {
      paginationButtons.push(
        Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `links_page_${currentPage - 1}`),
      );
    }
    if (currentPage < totalPages) {
      paginationButtons.push(
        Markup.button.callback('–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', `links_page_${currentPage + 1}`),
      );
    }

    await context.replyWithHTML(
      `<b>üìã –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage}:</b>`,
      Markup.inlineKeyboard([
        ...linkButtons.map((button) => [button]),
        paginationButtons,
      ]),
    );

    if (queryPayload) {
      await context.deleteMessage();
    }
  }

  @Action(/link_delete_(.+)/)
  async deleteLink(@Context() context: TelegramContext) {
    const linkId = context.match[1];

    const link = await this.database.link.delete({ where: { id: linkId } });

    await context.replyWithHTML(
      `üóëÔ∏è <b>–°—Å—ã–ª–∫–∞ ${link.name} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!</b>`,
    );

    await context.deleteMessage();
  }

  @Action(/link_(.+)/)
  async getLink(@Context() context: TelegramContext) {
    const linkId = context.match[1];

    const link = await this.database.link.findUnique({ where: { id: linkId } });

    await context.replyWithHTML(
      `
üîë <b>–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥: <code>${link.id}</code></b>

üè∑Ô∏è –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: ${link.name}
üîó URL: ${link.url}
      `,
      Markup.inlineKeyboard([
        Markup.button.callback(`üóëÔ∏è –£–¥–∞–ª–∏—Ç—å`, `link_delete_${link.id}`),
      ]),
    );
  }
}
